generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model children {
  id             Int          @id @default(autoincrement())
  family_id      Int
  person_id      Int
  schoolId       Int?
  grade          Int?
  level          Int?
  doc            String?      @db.VarChar(255)
  validate       Int?         @default(0) @db.TinyInt
  validateSchool Int?         @default(0)
  update_time    DateTime?    @db.Timestamp(0)
  create_time    DateTime?    @default(now()) @db.Timestamp(0)
  district_id    String?      @db.VarChar(6)
  person         person       @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_children_PERSON1")
  district       district?    @relation(fields: [district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_children_district1")
  family         family       @relation(fields: [family_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_children_family1")
  report_psy     report_psy[]
  vacant         vacant[]

  @@index([person_id], map: "fk_children_PERSON1_idx")
  @@index([family_id], map: "fk_children_family1_idx")
  @@index([district_id], map: "fk_children_district1_idx")
}

model district {
  id          String     @id @db.VarChar(6)
  name        String     @db.VarChar(80)
  province_id String     @db.VarChar(4)
  children    children[]
  province    province   @relation(fields: [province_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_DISTRICT_PROVINCE1")
  home        home[]

  @@index([province_id], map: "fk_district_province1_idx")
}

model doc {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(200)
  person_id   Int
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  person      person    @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_DOC_PERSON1")

  @@index([person_id], map: "fk_DOC_PERSON1_idx")
}

model family {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  mainParent        Int?                @map("main_parent")
  parent            Int?
  status            Int?                @default(0)
  create_time       DateTime?           @default(now()) @db.Timestamp(0)
  update_time       DateTime?           @db.Timestamp(0)
  children          children[]
  familiy_secretary familiy_secretary[]
  mainConyugue      user?               @relation("family_main_parentTouser", fields: [mainParent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_family_USER1")
  conyugue          user?               @relation("family_parentTouser", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_family_USER2")
  home              home[]
  income            income[]
  psy_evaluation    psy_evaluation[]

  @@index([mainParent], map: "fk_family_USER1_idx")
  @@index([parent], map: "fk_family_USER2_idx")
}

model home {
  id          Int       @id @default(autoincrement())
  address     String    @db.VarChar(255)
  reference   String?   @db.Text
  doc         String?   @db.VarChar(200)
  validate    Int?      @default(0) @db.TinyInt
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  district_id String    @db.VarChar(6)
  family_id   Int
  district    district  @relation(fields: [district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_HOME_DISTRICT1")
  family      family    @relation(fields: [family_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_home_family1")

  @@index([district_id], map: "fk_home_district1_idx")
  @@index([family_id], map: "fk_home_family1_idx")
}

model income {
  id          Int          @id @default(autoincrement())
  validate    Int?         @default(0) @db.TinyInt
  range_id    Int
  family_id   Int
  create_time DateTime?    @default(now()) @db.Timestamp(0)
  update_time DateTime?    @db.Timestamp(0)
  docsIncome  docsIncome[]
  family      family       @relation(fields: [family_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_incomes_FAMILY1")
  range       range        @relation(fields: [range_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_incomes_range1")

  @@index([family_id], map: "fk_incomes_FAMILY1_idx")
  @@index([range_id], map: "fk_incomes_range1_idx")
}

model person {
  id           Int              @id @default(autoincrement())
  name         String           @db.VarChar(120)
  lastname     String           @db.VarChar(45)
  mLastname    String           @db.VarChar(45)
  doc_number   String           @unique(map: "doc_number_UNIQUE") @db.Char(9)
  birthdate    DateTime?        @db.Date
  ubigeo       String?          @db.VarChar(45)
  issuance_doc DateTime?        @db.Date
  civil_status String?          @db.VarChar(45)
  gender       person_gender?
  profession   String?          @db.VarChar(255)
  type_doc     person_type_doc?
  role         person_role?
  validate     Int?             @default(0)
  create_time  DateTime?        @default(now()) @db.Timestamp(0)
  update_time  DateTime?        @db.Timestamp(0)
  chat         chat[]
  children     children[]
  doc          doc[]
  user         user[]
}

model province {
  id        String     @id @db.VarChar(4)
  name      String     @db.VarChar(80)
  region_id String     @db.VarChar(2)
  district  district[]
  region    region     @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PROVINCE_REGION1")

  @@index([region_id], map: "fk_province_region1_idx")
}

model range {
  id     Int      @id @default(autoincrement())
  name   String?  @db.VarChar(150)
  income income[]
}

model region {
  id       String     @id @db.VarChar(2)
  name     String     @db.VarChar(60)
  province province[]
}

model user {
  id                              Int                 @id @default(autoincrement())
  email                           String              @unique(map: "email_UNIQUE") @db.VarChar(200)
  phone                           String              @db.Char(9)
  password                        String?             @db.VarChar(60)
  confirmed_email                 Int?                @default(0) @db.TinyInt
  confirmed_phone                 Int?                @default(0) @db.TinyInt
  create_time                     DateTime?           @default(now()) @db.Timestamp(0)
  update_time                     DateTime?           @db.Timestamp(0)
  role                            Int                 @default(1)
  token                           String?             @db.VarChar(60)
  code                            String?             @db.Char(5)
  mauticId                        Int?
  agree                           Int?                @default(0)
  person_id                       Int
  chat                            chat[]
  familiy_secretary               familiy_secretary[]
  family_family_main_parentTouser family[]            @relation("family_main_parentTouser")
  family_family_parentTouser      family[]            @relation("family_parentTouser")
  psy_evaluation                  psy_evaluation[]
  person                          person              @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_USER_PERSON")
  user_roles                      user_roles[]

  @@index([person_id], map: "fk_USER_PERSON_idx")
}

model docsIncome {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(200)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  income_id   Int
  income      income    @relation(fields: [income_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_docsIncome_income1")

  @@index([income_id], map: "fk_docsIncome_income1_idx")
}

model vacant {
  id          Int       @id @default(autoincrement())
  year        String?   @db.VarChar(45)
  campus      String?   @db.VarChar(45)
  level       String?   @db.VarChar(45)
  grade       String?   @db.VarChar(45)
  children_id Int
  status      String?   @db.VarChar(45)
  validate    Int?      @default(0)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  children    children  @relation(fields: [children_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vacant_children1")

  @@index([children_id], map: "fk_vacant_children1_idx")
}

model familiy_secretary {
  id          Int       @id @default(autoincrement())
  family_id   Int
  user_id     Int
  status      Int?      @default(0)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  family      family    @relation(fields: [family_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_familiy_secretary_family1")
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_familiy_secretary_user1")

  @@index([family_id], map: "fk_familiy_secretary_family1_idx")
  @@index([user_id], map: "fk_familiy_secretary_user1_idx")
}

model permissions {
  id                Int                 @id @default(autoincrement())
  permission        String?             @db.VarChar(255)
  roles_permissions roles_permissions[]
}

model roles {
  id                Int                 @id @default(autoincrement())
  rol               String              @db.VarChar(255)
  roles_permissions roles_permissions[]
  user_roles        user_roles[]
}

model roles_permissions {
  id             Int         @id @default(autoincrement())
  roles_id       Int
  permissions_id Int
  create_time    DateTime?   @default(now()) @db.Timestamp(0)
  update_time    DateTime?   @db.Timestamp(0)
  permissions    permissions @relation(fields: [permissions_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_roles_permissions_permissions1")
  roles          roles       @relation(fields: [roles_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_roles_permissions_roles1")

  @@index([permissions_id], map: "fk_roles_permissions_permissions1_idx")
  @@index([roles_id], map: "fk_roles_permissions_roles1_idx")
}

model user_roles {
  id          Int       @id @default(autoincrement())
  user_id     Int
  roles_id    Int
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  token_boss  String?   @db.VarChar(255)
  roles       roles     @relation(fields: [roles_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_roles_roles1")
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_roles_user1")

  @@index([roles_id], map: "fk_user_roles_roles1_idx")
  @@index([user_id], map: "fk_user_roles_user1_idx")
}

model chat {
  id          Int       @id @default(autoincrement())
  message     String?   @db.LongText
  user_id     Int
  person_id   Int
  create_time DateTime? @default(now()) @db.Timestamp(0)
  person      person    @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chat_person1")
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chat_user1")

  @@index([person_id], map: "fk_chat_person1_idx")
  @@index([user_id], map: "fk_chat_user1_idx")
}

model doc_interview_psy {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  create_time       DateTime?      @default(now()) @db.Timestamp(0)
  update_time       DateTime?      @db.Timestamp(0)
  psy_evaluation_id Int
  psy_evaluation    psy_evaluation @relation(fields: [psy_evaluation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_doc_interview_psy_psy_evaluation1")

  @@index([psy_evaluation_id], map: "fk_doc_interview_psy_psy_evaluation1_idx")
}

model psy_evaluation {
  id                Int                 @id @default(autoincrement())
  applied           Int                 @default(0)
  approved          Int                 @default(0)
  doc1              String?             @db.VarChar(255)
  doc2              String?             @db.VarChar(255)
  create_time       DateTime?           @default(now()) @db.Timestamp(0)
  update_time       DateTime?           @db.Timestamp(0)
  family_id         Int
  user_id           Int
  doc_interview_psy doc_interview_psy[]
  family            family              @relation(fields: [family_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_psy_evaluation_family1")
  user              user                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_psy_evaluation_user1")
  quotes            quotes[]

  @@index([family_id], map: "fk_psy_evaluation_family1_idx")
  @@index([user_id], map: "fk_psy_evaluation_user1_idx")
}

model report_psy {
  id          Int       @id @default(autoincrement())
  doc         String    @db.VarChar(255)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  children_id Int
  children    children  @relation(fields: [children_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_interview_sheet_children1")

  @@index([children_id], map: "fk_interview_sheet_children1_idx")
}

model quotes {
  id                Int            @id @default(autoincrement())
  date              DateTime?      @db.DateTime(0)
  status            quotes_status?
  psy_evaluation_id Int
  psy_evaluation    psy_evaluation @relation(fields: [psy_evaluation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_quotes_psy_evaluation1")

  @@index([psy_evaluation_id], map: "fk_quotes_psy_evaluation1_idx")
}

enum person_gender {
  M
  F
}

enum person_type_doc {
  DNI
  CE
}

enum person_role {
  P
  M
}

enum quotes_status {
  scheduled
  rescheduled
  completed
  not_present
}

//cambiando  de nuevo
