generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model children {
  id             Int          @id @default(autoincrement())
  family_id      Int
  person_id      Int
  schoolId       Int?
  grade          Int?
  level          Int?
  doc            String?      @db.VarChar(255)
  update_time    DateTime?    @db.Timestamp(0)
  create_time    DateTime?    @default(now()) @db.Timestamp(0)
  district_id    String?      @db.VarChar(6)
  validate       Int?         @default(0) @db.TinyInt
  validateSchool Int?         @default(0)
  person         person       @relation(fields: [person_id], references: [id], onDelete: Cascade, map: "fk_children_PERSON1")
  district       district?    @relation(fields: [district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_children_district1")
  family         family       @relation(fields: [family_id], references: [id], onDelete: Cascade, map: "fk_children_family1")
  report_psy     report_psy[]
  vacant         vacant[]

  @@index([person_id], map: "fk_children_PERSON1_idx")
  @@index([family_id], map: "fk_children_family1_idx")
  @@index([district_id], map: "fk_children_district1_idx")
}

model district {
  id          String     @id @db.VarChar(6)
  name        String     @db.VarChar(80)
  province_id String     @db.VarChar(4)
  children    children[]
  province    province   @relation(fields: [province_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_DISTRICT_PROVINCE1")
  home        home[]

  @@index([province_id], map: "fk_district_province1_idx")
}

model doc {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(200)
  person_id   Int
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  person      person    @relation(fields: [person_id], references: [id], onDelete: Cascade, map: "fk_DOC_PERSON1")

  @@index([person_id], map: "fk_DOC_PERSON1_idx")
}

model family {
  id                               Int                     @id @default(autoincrement())
  name                             String                  @db.VarChar(255)
  create_time                      DateTime?               @default(now()) @db.Timestamp(0)
  update_time                      DateTime?               @db.Timestamp(0)
  status                           Int?                    @default(0)
  parent_one                       Int
  parent_two                       Int?
  background_assessment            background_assessment[]
  children                         children[]
  economic_evaluation              economic_evaluation[]
  familiy_secretary                familiy_secretary[]
  person_family_parent_oneToperson person                  @relation("family_parent_oneToperson", fields: [parent_one], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_family_person1")
  person_family_parent_twoToperson person?                 @relation("family_parent_twoToperson", fields: [parent_two], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_family_person2")
  home                             home[]
  income                           income[]
  psy_evaluation                   psy_evaluation[]

  @@index([parent_one], map: "fk_family_person1_idx")
  @@index([parent_two], map: "fk_family_person2_idx")
}

model home {
  id          Int       @id @default(autoincrement())
  address     String    @db.VarChar(255)
  reference   String?   @db.Text
  doc         String?   @db.VarChar(200)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  district_id String    @db.VarChar(6)
  family_id   Int
  validate    Int?      @default(0) @db.TinyInt
  district    district  @relation(fields: [district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_HOME_DISTRICT1")
  family      family    @relation(fields: [family_id], references: [id], onDelete: Cascade, map: "fk_home_family1")

  @@index([district_id], map: "fk_home_district1_idx")
  @@index([family_id], map: "fk_home_family1_idx")
}

model income {
  id          Int          @id @default(autoincrement())
  range_id    Int
  family_id   Int
  create_time DateTime?    @default(now()) @db.Timestamp(0)
  update_time DateTime?    @db.Timestamp(0)
  validate    Int?         @default(0) @db.TinyInt
  docsIncome  docsIncome[]
  family      family       @relation(fields: [family_id], references: [id], onDelete: Cascade, map: "fk_incomes_FAMILY1")
  range       range        @relation(fields: [range_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_incomes_range1")

  @@index([family_id], map: "fk_incomes_FAMILY1_idx")
  @@index([range_id], map: "fk_incomes_range1_idx")
}

model person {
  id                               Int              @id @default(autoincrement())
  name                             String           @db.VarChar(120)
  lastname                         String           @db.VarChar(45)
  mLastname                        String           @db.VarChar(45)
  doc_number                       String           @unique(map: "doc_number_UNIQUE") @db.Char(9)
  birthdate                        DateTime?        @db.Date
  ubigeo                           String?          @db.VarChar(45)
  issuance_doc                     DateTime?        @db.Date
  civil_status                     String?          @db.VarChar(45)
  gender                           person_gender?
  profession                       String?          @db.VarChar(255)
  phone                            String?          @db.Char(9)
  type_doc                         person_type_doc?
  role                             person_role?
  create_time                      DateTime?        @default(now()) @db.Timestamp(0)
  update_time                      DateTime?        @db.Timestamp(0)
  validate                         Int?             @default(0)
  phone_validate                   Int?             @db.TinyInt
  email                            String?          @db.VarChar(255)
  children                         children[]
  doc                              doc[]
  family_family_parent_oneToperson family[]         @relation("family_parent_oneToperson")
  family_family_parent_twoToperson family[]         @relation("family_parent_twoToperson")
  user                             user[]
}

model province {
  id        String     @id @db.VarChar(4)
  name      String     @db.VarChar(80)
  region_id String     @db.VarChar(2)
  district  district[]
  region    region     @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PROVINCE_REGION1")

  @@index([region_id], map: "fk_province_region1_idx")
}

model range {
  id     Int      @id @default(autoincrement())
  name   String?  @db.VarChar(150)
  income income[]
}

model region {
  id       String     @id @db.VarChar(2)
  name     String     @db.VarChar(60)
  province province[]
}

model user {
  id                Int                 @id @default(autoincrement())
  sub               String              @unique(map: "sub_UNIQUE") @db.VarChar(255)
  create_time       DateTime?           @default(now()) @db.Timestamp(0)
  update_time       DateTime?           @db.Timestamp(0)
  person_id         Int
  familiy_secretary familiy_secretary[]
  psy_evaluation    psy_evaluation[]
  person            person              @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_USER_PERSON")

  @@index([person_id], map: "fk_USER_PERSON_idx")
}

model docsIncome {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(200)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  income_id   Int
  income      income    @relation(fields: [income_id], references: [id], onDelete: Cascade, map: "fk_docsIncome_income1")

  @@index([income_id], map: "fk_docsIncome_income1_idx")
}

model vacant {
  id          Int            @id @default(autoincrement())
  campus      String?        @db.VarChar(45)
  level       String?        @db.VarChar(45)
  grade       String?        @db.VarChar(45)
  children_id Int
  status      vacant_status? @default(on_process)
  create_time DateTime?      @default(now()) @db.Timestamp(0)
  update_time DateTime?      @db.Timestamp(0)
  validate    Int?           @default(0)
  year_id     Int?
  children    children       @relation(fields: [children_id], references: [id], onDelete: Cascade, map: "fk_vacant_children1")
  year        year?          @relation(fields: [year_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_year_id")

  @@index([children_id], map: "fk_vacant_children1_idx")
  @@index([year_id], map: "fk_year_id")
}

model familiy_secretary {
  id          Int       @id @default(autoincrement())
  family_id   Int
  user_id     Int
  status      Int?      @default(0)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  year_id     Int
  family      family    @relation(fields: [family_id], references: [id], onDelete: Cascade, map: "fk_familiy_secretary_family1")
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_familiy_secretary_user1")
  year        year      @relation(fields: [year_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_familiy_secretary_year1")

  @@index([family_id], map: "fk_familiy_secretary_family1_idx")
  @@index([user_id], map: "fk_familiy_secretary_user1_idx")
  @@index([year_id], map: "fk_familiy_secretary_year1_idx")
}

model doc_interview_psy {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  create_time       DateTime?      @default(now()) @db.Timestamp(0)
  update_time       DateTime?      @db.Timestamp(0)
  psy_evaluation_id Int
  psy_evaluation    psy_evaluation @relation(fields: [psy_evaluation_id], references: [id], onDelete: Cascade, map: "fk_doc_interview_psy_psy_evaluation1")

  @@index([psy_evaluation_id], map: "fk_doc_interview_psy_psy_evaluation1_idx")
}

model psy_evaluation {
  id                Int                 @id @default(autoincrement())
  applied           Int                 @default(0)
  approved          Int                 @default(0)
  doc1              String?             @db.VarChar(255)
  doc2              String?             @db.VarChar(255)
  create_time       DateTime?           @default(now()) @db.Timestamp(0)
  update_time       DateTime?           @db.Timestamp(0)
  family_id         Int
  user_id           Int
  year_id           Int
  doc_interview_psy doc_interview_psy[]
  family            family              @relation(fields: [family_id], references: [id], onDelete: Cascade, map: "fk_psy_evaluation_family1")
  user              user                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_psy_evaluation_user1")
  year              year                @relation(fields: [year_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_psy_evaluation_year1")
  quotes            quotes[]

  @@index([family_id], map: "fk_psy_evaluation_family1_idx")
  @@index([user_id], map: "fk_psy_evaluation_user1_idx")
  @@index([year_id], map: "fk_psy_evaluation_year1_idx")
}

model report_psy {
  id          Int       @id @default(autoincrement())
  doc         String    @db.VarChar(255)
  create_time DateTime? @default(now()) @db.Timestamp(0)
  update_time DateTime? @db.Timestamp(0)
  children_id Int
  children    children  @relation(fields: [children_id], references: [id], onDelete: Cascade, map: "fk_interview_sheet_children1")

  @@index([children_id], map: "fk_interview_sheet_children1_idx")
}

model quotes {
  id                Int            @id @default(autoincrement())
  date              DateTime?      @db.DateTime(0)
  status            quotes_status?
  psy_evaluation_id Int
  psy_evaluation    psy_evaluation @relation(fields: [psy_evaluation_id], references: [id], onDelete: Cascade, map: "fk_quotes_psy_evaluation1")

  @@index([psy_evaluation_id], map: "fk_quotes_psy_evaluation1_idx")
}

model background_assessment {
  id          Int                               @id @default(autoincrement())
  comment     String?                           @db.Text
  conclusion  background_assessment_conclusion?
  create_time DateTime?                         @default(now()) @db.Timestamp(0)
  update_time DateTime?                         @db.Timestamp(0)
  family_id   Int
  family      family                            @relation(fields: [family_id], references: [id], onDelete: Cascade, map: "fk_background_assessment_family1")

  @@index([family_id], map: "fk_background_assessment_family1_idx")
}

model economic_evaluation {
  id          Int                             @id @default(autoincrement())
  result      economic_evaluation_result?
  comment     String?                         @db.Text
  conclusion  economic_evaluation_conclusion?
  create_time DateTime?                       @default(now()) @db.Timestamp(0)
  update_time DateTime?                       @db.Timestamp(0)
  family_id   Int
  family      family                          @relation(fields: [family_id], references: [id], onDelete: Cascade, map: "fk_economic_evaluation_family1")

  @@index([family_id], map: "fk_economic_evaluation_family1_idx")
}

model deletion_log {
  id    Int       @id @default(autoincrement())
  table String?   @db.VarChar(45)
  user  String?   @db.VarChar(45)
  date  DateTime? @default(now()) @db.Timestamp(0)
}

model year {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "name") @db.VarChar(20)
  dateStart         DateTime?           @db.DateTime(0)
  dateEnd           DateTime?           @db.DateTime(0)
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @db.Timestamp(0)
  status            Boolean             @default(true)
  familiy_secretary familiy_secretary[]
  psy_evaluation    psy_evaluation[]
  vacant            vacant[]
}

enum person_gender {
  M
  F
}

enum person_type_doc {
  DNI
  CE
}

enum person_role {
  P
  M
}

enum quotes_status {
  scheduled
  rescheduled
  completed
  not_present
}

enum economic_evaluation_result {
  excelente
  regular
  malo
  sn
}

enum background_assessment_conclusion {
  apto
  no_apto @map("no apto")
}

enum economic_evaluation_conclusion {
  apto
  no_apto @map("no apto")
}

enum vacant_status {
  on_process @map("on process")
  accepted
  denied
}
